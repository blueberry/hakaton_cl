<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443106954665">{:repl-history {:ide [], :local [&quot;(boot-server)&quot; &quot;(boot-internal-serverserver)&quot; &quot;(boot-internal-server)&quot; &quot;(connect-external-server 57110)&quot; &quot;(use 'overtone.studio.core\n     )&quot; &quot;(use 'overtone.live)&quot; &quot;(boot-external-server 57110)&quot; &quot;(connect-external-server \&quot;192.168.1.23\&quot; 57110)&quot; &quot;(use 'overtone.core)&quot; &quot;(demo (sin-osc\n        ))&quot; &quot;(demo (sin-osc-fb:ar))&quot; &quot;(demo 7 (lpf (mix (saw [50 (line 100 1600 5) 101 100.5]))\n             (lin-lin (lf-tri (line 2 20 5)) -1 1 400 4000)))&quot; &quot;(sample (freesound-path 2086))&quot; &quot;(metronome 200)&quot; &quot;(demo 10 (lpf (saw 100) (mouse-x 40 5000 EXP)))&quot; &quot;(demo 10 (hpf (saw 100) (mouse-x 40 5000 EXP)))&quot; &quot;(demo 30 (bpf (saw 100) (mouse-x 40 5000 EXP) (mouse-y 0.01 1 LIN)))&quot; &quot;(let [freq 220]\n  (demo (pluck \n          (* (white-noise) (env-gen (perc 0.001 2) \n                                    :action FREE)) 1 3 (/ 1 freq))))&quot; &quot;(let [freq 220]\n  (demo (pluck \n          (* (white-noise) (env-gen (perc 0.001 2) \n                                    \n                                    :action FREE)) 1 3 (/ 1 freq))))&quot; &quot;(definst foo [] (saw-220))&quot; &quot;(definst foo [] (saw 220))&quot; &quot;(foo)&quot; &quot;(kill 4)&quot; &quot;(kill foo)&quot; &quot;(definst bar [freq 220] (saw freq))&quot; &quot;(bar)&quot; &quot;(kill bar)&quot; &quot;(definst trem [freq 440 depth 10 rate 6 length 3]\n         (* 0.3\n            (line:kr 0 1 length FREE)\n            (saw (+ freq (* depth (sin-osc:kr rate))))))&quot; &quot;(trem)&quot; &quot;(definst kick [freq 120 dur 0.3 width 0.5]\n         (let [freq-env (* freq (env-gen (perc 0 (* 0.99 dur))))\n               env (env-gen (perc 0.01 dur) 1 1 0 1 FREE)\n               sqr (* (env-gen (perc 0 0.01)) (pulse (* 2 freq) width))\n               src (sin-osc freq-env)\n               drum (+ sqr (* env src))]\n           (compander drum drum 0.2 1 0.1 0.01 0.01)))&quot; &quot;(kick)&quot; &quot;(kick\n  )&quot; &quot;(kick\n   kick kick)&quot; &quot;(kick\n   )&quot; &quot;(c-hat)&quot; &quot;(def metro (metronome 128))&quot; &quot;(metro)&quot; &quot;(metro 100)&quot; &quot;(defn player [beat]\n  (at (metro beat) (kick))\n  (at (metro (+ 0.5 beat)) (c-hat))\n  (apply-by (metro (inc beat)) #'player (inc beat) []))&quot; &quot;(player (metro))&quot; &quot;(metro-bpm metro 120)&quot; &quot;(kill player)&quot; &quot;(+ 213 123)&quot; &quot;(use 'overtone.core\n     )&quot; &quot;(connectext)&quot; &quot;(connect-external-server )&quot; &quot;(demo (example dbrown :rand-walk))\n&quot; &quot;(demo 10 (example dbrown :rand-walk))&quot; &quot;(demo (example membrane-circle\n :mouse               ))&quot; &quot;(demo (example membrane-circle :mouse))&quot; &quot;(examples)&quot; &quot;(demo (example diwhite :rand-seq))&quot; &quot;(demo (example vosim :mouse1))&quot; &quot;(demo (example vosim :mouse2))&quot; &quot;(demo (example vosim :mouse2 :mouse1))&quot; &quot;(recording-start \&quot;~/Desktop/foo.wav\&quot;)\n;; make some noise. i.e.\n(demo (pan2 (sin-osc)))\n;; stop recording\n(recording-stop)&quot; &quot;(recording-start \&quot;C:/Users/Raca420/Desktop/foo.wav\&quot;)\n;; make some noise. i.e.\n(demo (pan2 (sin-osc)))\n;; stop recording\n(recording-stop)&quot; &quot;(scale :C3 :major)&quot; &quot;(source SCALE)&quot; &quot;(definst c-hat [amp 0.8 t 0.04]\n         (let [env (env-gen (perc 0.001 t) 1 1 0 1 FREE)\n               noise (white-noise)\n               sqr (* (env-gen (perc 0.01 0.04)) (pulse 880 0.2))\n               filt (bpf (+ sqr noise) 9000 0.5)]\n           (* amp env filt)))\n\n\n(definst o-hat [amp 0.8 t 0.5]\n         (let [env (env-gen (perc 0.001 t) 1 1 0 1 FREE)\n               noise (white-noise)\n               sqr (* (env-gen (perc 0.01 0.04)) (pulse 880 0.2))\n               filt (bpf (+ sqr noise) 9000 0.5)]\n           (* amp env filt)))\n\n(defn swinger [beat]\n  (at (metro beat) (o-hat))\n  (at (metro (inc beat)) (c-hat))\n  (at (metro (+ 1.65 beat)) (c-hat))\n  (apply-at (metro (+ 2 beat)) #'swinger (+ 2 beat) []))\n\n; define a metronome at a given tempo, expressed in beats per minute.\n(def metro (metronome 120))\n\n(swinger (metro))&quot; &quot;(definst o-hat [amp 0.8 t 0.5]\n         (let [env (env-gen (perc 0.001 t) 1 1 0 1 FREE)\n               noise (white-noise)\n               sqr (* (env-gen (perc 0.01 0.04)) (pulse 880 0.2))\n               filt (bpf (+ sqr noise) 9000 0.5)]\n           (* amp env filt)))&quot; &quot;(defn swinger [beat]\n  (at (metro beat) (o-hat))\n  (at (metro (inc beat)) (c-hat))\n  (at (metro (+ 1.65 beat)) (c-hat))\n  (apply-at (metro (+ 2 beat)) #'swinger (+ 2 beat) []))&quot; &quot;(def metro (metronome 120))\n&quot; &quot;(swinger (metro))&quot; &quot;(kill swinger)&quot; &quot;(connect-external-server  )&quot; &quot;(demo (sin-sc))&quot; &quot;(demo (sin-osc))&quot; &quot;(lpf (sin-osc [440 443]) 600)&quot; &quot;(sin-square2)&quot; &quot;(sin-square2 213)&quot; &quot;(sin-osc [440 445])&quot; &quot;(defsynth sin-square2 [freq 440]\n          (out 0 (* [0.5 0.5] (+ (square (* 0.5 freq)) (sin-osc freq)))))&quot; &quot;(definst c-hat [amp 0.8 t 0.04]\n         (let [env (env-gen (perc 0.001 t) 1 1 0 1 FREE)\n               noise (white-noise)\n               sqr (* (env-gen (perc 0.01 0.04)) (pulse 880 0.2))\n               filt (bpf (+ sqr noise) 9000 0.5)]\n           (* amp env filt)))&quot; &quot;(demo(c-hat))&quot; &quot;(connect-external-server)&quot; &quot;(boot-external-server)&quot; &quot;(demo (osc))&quot; &quot;(demo(sin-osc))&quot; &quot;dbrown\n:rand-walk       (:ar) - Random floating point\nnumber walk through\nfreqs with rate\ndetermined by mouse-x&quot; &quot;(demo (example dbrown :rand-walk))&quot; &quot;(+ 123 132)&quot; &quot;lein ring server&quot;], :remote []}}</component>
</project>